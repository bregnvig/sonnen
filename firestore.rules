rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{Users} {
      allow read: if request.auth.uid == Users
        || getUserData().roles.hasAny(['admin']);
      allow update, write: if request.auth.uid == Users && notUpdating('roles') && notUpdating('uid')
        || getUserData().roles.hasAny(['admin']) && notUpdating('uid');
      allow delete: if getUserData().roles.hasAny(['admin']);
      allow create: if getUserData().roles.hasAny(['admin']) || request.auth.uid != null && validCreate();
    }


    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data
    }

    function notUpdating(field) {
      // prevent update of specific document data object - like roles
      return !(field in request.resource.data) || resource.data[field] == request.resource.data[field]
    }


    function validCreate() {
      return !(request.resource.data.keys().hasAny(['roles', 'balance']));
    }
  }
}
